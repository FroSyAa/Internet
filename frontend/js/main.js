const API_URL = '/api';

let categories = [];
let categoryProducts = {};

document.addEventListener('DOMContentLoaded', () => {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    loadCategories();
    setupEventListeners();
});

async function loadCategories() {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', `${API_URL}/categories`);
        const response = await fetch(`${API_URL}/categories`);
        console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const categoriesData = await response.json();
        console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:', categoriesData);
        
        categories = categoriesData.map(cat => typeof cat === 'object' ? cat.name : cat);
        console.log('–ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', categories);
        
        await loadAllCategoryProducts();
        displayCategories(categoriesData);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.');
    }
}

async function loadAllCategoryProducts() {
    try {
        const promises = categories.map(async (categoryName) => {
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoryName);
            const response = await fetch(`${API_URL}/products?category=${encodeURIComponent(categoryName)}`);
            const products = await response.json();
            console.log(`–¢–æ–≤–∞—Ä—ã –¥–ª—è ${categoryName}:`, products.length);
            categoryProducts[categoryName] = products;
        });
        await Promise.all(promises);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
}

function displayCategories(categoriesData) {
    const grid = document.getElementById('categories-grid');
    
    if (!grid) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç categories-grid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    if (!categoriesData || categoriesData.length === 0) {
        console.warn('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Å—Ç—ã');
        grid.innerHTML = '<p style="text-align: center; grid-column: 1/-1; color: var(--text-dim);">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }
    
    console.log('–û—Ç–æ–±—Ä–∞–∂–∞—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', categoriesData);
    
    grid.innerHTML = categoriesData.map(categoryData => {
        const categoryName = typeof categoryData === 'object' ? categoryData.name : categoryData;
        const categoryImage = (typeof categoryData === 'object' && categoryData.image_path) ? categoryData.image_path : getCategoryImage(categoryName);
        const products = categoryProducts[categoryName] || [];
        const productCount = products.length;
        const first5Products = products.slice(0, 5);
        
        return `
            <a href="/category.html?category=${encodeURIComponent(categoryName)}" class="category-card">
                <div class="category-image-wrapper">
                    <img src="${categoryImage}" 
                         alt="${categoryName}" 
                         class="category-image"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <div class="category-emoji" style="display: none;">
                        ${getCategoryEmoji(categoryName)}
                    </div>
                </div>
                <div class="category-info">
                    <h3 class="category-name">${categoryName}</h3>
                    <p class="category-count">${productCount} ${pluralize(productCount, '–º–æ—Ç–æ—Ü–∏–∫–ª', '–º–æ—Ç–æ—Ü–∏–∫–ª–∞', '–º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤')}</p>
                </div>
                <div class="category-hover-info">
                    <div class="category-hover-title">–¢–æ–ø —Ç–æ–≤–∞—Ä—ã:</div>
                    ${first5Products.length > 0 ? 
                        first5Products.map(product => `
                            <div class="category-hover-product">
                                ‚Ä¢ ${product.product_name}
                            </div>
                        `).join('') 
                        : '<div class="category-hover-product">–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>'
                    }
                </div>
            </a>
        `;
    }).join('');
    
    console.log('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
}

function getCategoryImage(category) {
    const imageMap = {
        '–°–ø–æ—Ä—Ç–±–∞–π–∫–∏': '/images/categories/sport.png',
        '–ö—Ä—É–∏–∑–µ—Ä—ã': '/images/categories/cruiser.png',
        '–≠–Ω–¥—É—Ä–æ': '/images/categories/enduro.png',
        '–ö–ª–∞—Å—Å–∏–∫–∞': '/images/categories/classic.png',
        '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ': '/images/categories/touring.png',
        '–ö–∞—Å—Ç–æ–º—ã': '/images/categories/custom.png'
    };
    return imageMap[category] || '/images/categories/default.png';
}

function getCategoryEmoji(category) {
    const emojis = {
        '–°–ø–æ—Ä—Ç–±–∞–π–∫–∏': 'üèçÔ∏è',
        '–ö—Ä—É–∏–∑–µ—Ä—ã': 'üõ£Ô∏è',
        '–≠–Ω–¥—É—Ä–æ': '‚õ∞Ô∏è',
        '–ö–ª–∞—Å—Å–∏–∫–∞': 'üé∏',
        '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ': 'üó∫Ô∏è',
        '–ö–∞—Å—Ç–æ–º—ã': 'üîß'
    };
    return emojis[category] || 'üèçÔ∏è';
}

function pluralize(count, one, two, five) {
    let n = Math.abs(count);
    n %= 100;
    if (n >= 5 && n <= 20) {
        return five;
    }
    n %= 10;
    if (n === 1) {
        return one;
    }
    if (n >= 2 && n <= 4) {
        return two;
    }
    return five;
}

function showError(message) {
    const grid = document.getElementById('categories-grid');
    if (grid) {
        grid.innerHTML = `<p style="text-align: center; grid-column: 1/-1; color: var(--primary);">${message}</p>`;
    }
}

function setupEventListeners() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({ behavior: 'smooth' });
            }
        });
    });
}